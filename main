import pygame, sys
from copy import deepcopy
from random import choice, randrange
import json

#создание игрового поля
W, H = 10, 20 #создание плиток
TILE = 45 #размер плитки
GAME_RES = W * TILE, H * TILE
RES = 750, 940
FPS = 60


#МЕНЮ
def text_menu(message, x, y, font_color = ('green'), font_type = 'Доп/font.ttf', font_size = 150):
    font_type = pygame.font.Font(font_type, font_size)
    text = font_type.render(message, True, font_color)
    sc.blit(text, (x, y))

    

def show_menu():
    menu = True
    menu_back = pygame.image.load('Доп/fon2.jpg')
    start_button = Button(290, 80)
    quit_button = Button(290, 80)
    ruk_button = Button(540, 80)
    while menu:
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                quit()
        
        sc.blit(menu_back, (0, 0))
        text_menu('TETRIS', 100, 10)
        start_button.draw(230, 320, 'ИГРАТЬ', start_game) 
        ruk_button.draw(110, 440, 'РУКОВОДСТВО', ruk)
        quit_button.draw(230, 560, 'ВЫХОД', quit)
        
        

        pygame.display.update()
        clock.tick(60)


#РУКОВОДСТВО
def ruk():
    show_menu = False 
    ruk = True
    ruk_back = pygame.image.load('Доп/fon2.jpg')
    def text_ruk(message, x, y, font_color = ('purple'), font_type = 'Доп/font.ttf', font_size = 80):
        font_type = pygame.font.Font(font_type, font_size)
        text = font_type.render(message, True, font_color)
        sc.blit(text, (x, y))
    def text(message, x, y, font_color = ('green'), font_type = 'Доп/font.ttf', font_size = 40):
        font_type = pygame.font.Font(font_type, font_size)
        text = font_type.render(message, True, font_color)
        sc.blit(text, (x, y))
    def text_tetr(message, x, y, font_color = ('white'), font_type = 'Доп/font.ttf', font_size = 140):
        font_type = pygame.font.Font(font_type, font_size)
        text = font_type.render(message, True, font_color)
        sc.blit(text, (x, y))        
    while ruk:
        menu = False
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                pygame.quit()
                quit()
        
        sc.blit(ruk_back, (0, 0))               
        text_ruk('РУКОВОДСТВО', 35, 10)
        text('ESC - выход в главное меню', 35, 160)
        text('SPACE - пауза в игре', 35, 240)
        text('ENTER - продолжение игры', 35, 320)
        text('RECORD - сохранение', 35, 400)
        text('максимального результата', 45, 460)
        text('P - пауза мелодии', 35, 540)
        text('O - воспроизведение мелодии', 35, 610)
        text_tetr('TETRIS', 110, 660)
        pressed_keys = pygame.key.get_pressed()
        if pressed_keys[pygame.K_ESCAPE]:
            ruk = False
            show_menu = True
            
        pygame.display.update()
        clock.tick(60)
        
#Игра
def start_game():
    
    #создание сетки
    grid = [pygame.Rect(x * TILE, y * TILE, TILE, TILE) for x in range(W) for y in range(H)]

    #координаты плиток всех фигур
    figures_pos = [[(-1, 0), (-2, 0), (0, 0), (1, 0)],
                   [(0, -1), (-1, -1), (-1, 0), (0, 0)],
                   [(-1, 0), (-1, 1), (0, 0), (0, -1)],
                   [(0, 0), (-1, 0), (0, 1), (-1, -1)],
                   [(0, 0), (0, -1), (0, 1), (-1, -1)],
                   [(0, 0), (0, -1), (0, 1), (1, -1)],
                   [(0, 0), (0, -1), (0, 1), (-1, 0)]]

    #создаем массив из которого будем брать фигуры
    figures = [[pygame.Rect(x + W // 2, y + 1, 1, 1) for x, y in fig_pos] for fig_pos in figures_pos]

    #отрисовка фигуры
    figure_rect = pygame.Rect(0, 0, TILE - 2, TILE - 2)
    
    #карта игрового поля    
    field = [[0 for i in range(W)] for j in range(H)]

    #плавность падения
    anim_count, anim_speed, anim_limit = 0, 60, 2000

    #задний фон
    bg = pygame.image.load('Доп/fon1.jpg').convert()
    game_bg = pygame.image.load('Доп/fon2.jpg').convert()

    #шрифт для надписи с игрой
    main_font = pygame.font.Font('Доп/font.ttf', 60)

    #шрифт для другой информации
    font = pygame.font.Font('Доп/19888.ttf', 57)

    title_tetris = main_font.render('ТЕТРИС', True, pygame.Color('green'))
    title_score = font.render('ОЧКОВ:', True, pygame.Color('red'))
    title_record = font.render('РЕКОРД:', True, pygame.Color('green'))

    #звуковое сопровождение

    pygame.mixer.music.load('Доп/slowed.mp3')
    pygame.mixer.music.play(loops = -1)
    pygame.mixer.music.set_volume(0.2)
    pygame.event.wait()

  
    #раскраска фигуры
    get_color = lambda : (randrange(30, 256), randrange(30, 256), randrange(30, 256))

    #следующая фигура и ее цвет
    figure, next_figure = deepcopy(choice(figures)), deepcopy(choice(figures))
    color, next_color = get_color(), get_color()

    #набирание очков
    score, lines = 0, 0
    scores = {0: 0, 1: 100, 2: 300, 3: 700, 4: 1500}

    #проверка границ, чтобы фигура не выходила за пределы
    def check_borders():
        if figure[i].x < 0 or figure[i].x > W - 1:
            return False
        elif figure[i].y > H - 1 or field[figure[i].y][figure[i].x]:
            return False
        return True

    #ПРОВЕРКА РЕКОРДА
    def get_record():
        try:
            with open('record') as f:
                return f.readline()
        except FileNotFoundError:
            with open('record', 'w') as f:
                f.write('0')

    #НОВЫЙ РЕКОРД ЕСЛИ ПРОШЛЫЙ МЕНЬШЕ
    def set_record(record, score):
        rec = max(int(record), score)
        with open('record', 'w') as f:
            f.write(str(rec))
    def mus():
        mus_button = Button(50, 50)
        mus_button.draw(400, 400, 'ВКЛ')


    while True:
        record = get_record()
        dx, rotate = 0, False
        sc.blit(bg, (0, 0))
        sc.blit(game_sc, (20, 20))
        game_sc.blit(game_bg, (0, 0))
    
        #задержка для строк
        for i in range(lines):
            pygame.time.wait(200)
    
        #управление фигурой на клавиши
        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                exit()

            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_LEFT:
                    dx = -1
                elif event.key == pygame.K_RIGHT:
                    dx = 1
                elif event.key == pygame.K_DOWN:
                    anim_limit = 100
                elif event.key == pygame.K_UP:
                    rotate = True
                if event.key == pygame.K_ESCAPE:
                    pygame.mixer.music.stop()
                    show_menu()
                if event.key == pygame.K_p:
                    pygame.mixer.music.pause()
                if event.key == pygame.K_o:
                    pygame.mixer.music.unpause()         
                if event.key == pygame.K_SPACE:
                    pause()

    
    
        #счетчик x
        figure_old = deepcopy(figure)
        for i in range(4):
            figure[i].x += dx
            if not check_borders():
                figure = deepcopy(figure_old)
                break
    
        #счетчик Y (ускорение фигуры) 
        anim_count += anim_speed
        if anim_count > anim_limit:
            anim_count = 0
            figure_old = deepcopy(figure)
            for i in range(4):
                figure[i].y += 1
                if not check_borders():
                    for i in range(4):
                        field[figure_old[i].y][figure_old[i].x] = color
                    figure, color = next_figure, next_color
                    next_figure, next_color = deepcopy(choice(figures)), get_color()
                    anim_limit = 2000
                    break
    
        #вращение фигур
        center = figure[0]
        figure_old = deepcopy(figure)
        if rotate:
            for i in range(4):
                x = figure[i].y - center.y
                y = figure[i].x - center.x
                figure[i].x = center.x - x
                figure[i].y = center.y + y
                if not check_borders():
                    figure = deepcopy(figure_old)
                    break
    

        #проверка последней линии на игровом поле
        #при заполнении чтобы она удалялась
        line, lines = H - 1, 0
        for row in range(H - 1, -1, -1):
            count = 0
            for i in range(W):
                if field[row][i]:
                    count += 1
                field[line][i] = field[row][i]
            if count < W:
                line -= 1
            else:
                anim_speed += 3
                lines += 1
    
        #счетчик очков
        score += scores[lines]
    
        #отрисовка сетки
        [pygame.draw.rect(game_sc, (40, 40, 40), i_rect, 1) for i_rect in grid]
    
        #отрисовка фигур
        for i in range(4):
            figure_rect.x = figure[i].x * TILE
            figure_rect.y = figure[i].y * TILE
            pygame.draw.rect(game_sc, color, figure_rect)
    
        #отрисовка фигур по карте игрового поля
        for y, raw in enumerate(field):
            for x, col in enumerate(raw):
                if col:
                    figure_rect.x, figure_rect.y = x * TILE, y * TILE
                    pygame.draw.rect(game_sc, col, figure_rect)
    
        #отрисовка следующей фигуры
        for i in range(4):
            figure_rect.x = next_figure[i].x * TILE + 380
            figure_rect.y = next_figure[i].y * TILE + 300
            pygame.draw.rect(sc, next_color, figure_rect)
    
        #рекорд и очки
        sc.blit(title_tetris, (485, 10))
        sc.blit(title_score, (525, 790))
        sc.blit(font.render(str(score), True, pygame.Color('white')), (560, 850))
        sc.blit(title_record, (525, 650))
        sc.blit(font.render(record, True, pygame.Color('purple')), (560, 710))

        #ПАУЗА
        def print_text(message, x, y, font_color = ('Green'), font_type = 'Доп/font.ttf', font_size = 33):
            font_type = pygame.font.Font(font_type, font_size)
            text = font_type.render(message, True, font_color)
            sc.blit(text, (x, y))  

        def pause():
            paused = True
            #сохранение информации при нажатии кнопки на паузу
            sc.blit(title_tetris, (485, 10))
            sc.blit(title_score, (525, 790))
            sc.blit(font.render(str(score), True, pygame.Color('white')), (560, 850))
            sc.blit(title_record, (525, 650))
            sc.blit(font.render(record, True, pygame.Color('purple')), (560, 710))
            for i in range(4):
                figure_rect.x = next_figure[i].x * TILE + 380
                figure_rect.y = next_figure[i].y * TILE + 300
                pygame.draw.rect(sc, next_color, figure_rect)
        
            #сама пауза
            while paused:
                for event in pygame.event.get():
                    if event.type == pygame.QUIT:
                        pygame.quit()
                        quit()
            
                pygame.mixer.music.pause()
                print_text('Нажмите ENTER, чтобы продолжить', 25, 455)        

                pressed_keys = pygame.key.get_pressed()
                if pressed_keys[pygame.K_RETURN]:
                    paused = False
                    pygame.mixer.music.unpause()
                if pressed_keys[pygame.K_ESCAPE]:
                    pygame.mixer.music.stop()
                    show_menu()
                pygame.display.update()
                clock.tick(15)                 

    



        #завершение игры
        for i in range(W):
            if field[0][i]:
                set_record(record, score)
                field = [[0 for i in range(W)] for i in range(H)]
                anim_count, anim_speed, anim_limit = 0, 60, 2000
                score = 0
                for i_rect in grid:
                    pygame.draw.rect(game_sc, get_color(), i_rect)
                    sc.blit(game_sc, (20, 20))
                    pygame.display.flip()
                    clock.tick(200)

    
        pygame.display.flip()
        clock.tick(FPS)

#КНОПКИ
def text_button(message, x, y, font_color = ('black'), font_type = 'Доп/font.ttf', font_size = 60):
        font_type = pygame.font.Font(font_type, font_size)
        text = font_type.render(message, True, font_color)
        sc.blit(text, (x, y))
       

class Button:
    def __init__(self, width, height):
        self.width = width
        self.height = height
        self.inactive_color = (56, 167, 156)
        self.active_color = (13, 217, 77)
    

    def draw(self, x, y, message, action = None, font_size = None):
        mouse = pygame.mouse.get_pos()
        clicked = pygame.mouse.get_pressed()


        #если курсор на кнопке, цвет меняется, в противном случае остается прежним
        if x < mouse[0] < x + self.width:
            pygame.draw.rect(sc, self.inactive_color, (x, y, self.width, self.height))
            
            if y < mouse[1] < y + self.height:
                pygame.draw.rect(sc, self.active_color, (x, y, self.width, self.height))

                if clicked[0] == 1:
                    pygame.mixer.music.load('Доп/button.mp3')
                    pygame.mixer.music.play()
                    pygame.event.wait()
                    pygame.time.delay(300)
                    if action is not None:
                        if action == quit:
                            pygame.quit()
                            quit()
                        else:
                            action()
        else:
            pygame.draw.rect(sc, self.inactive_color, (x, y, self.width, self.height))       
        text_button(message = message, x = x + 15, y = y - 17)


#запуск
pygame.init()
pygame.display.set_caption('ТЕТРИС')
pygame.display.set_icon(pygame.image.load('Доп/Tetris.png'))
sc = pygame.display.set_mode(RES)
game_sc = pygame.Surface(GAME_RES)
clock = pygame.time.Clock()
show_menu()
mus()

  
#Цикл игры
runGame = True #флаг выхода из цикла игры

while runGame:
    #Отслеживание события: "закрыть окно"
    for event in pygame.event.get():
        if event.type == pygame.QUIT: 
            runGame = False

#Выход из игры: 
pygame.quit()
